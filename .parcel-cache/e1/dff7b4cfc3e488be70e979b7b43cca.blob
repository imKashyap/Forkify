"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadRecipe = exports.deleteBookmark = exports.addBookmark = exports.updateServings = exports.getSearchResultsPage = exports.loadSearchResults = exports.loadRecipe = exports.state = void 0;

var _regeneratorRuntime = require("regenerator-runtime");

var _config = require("./config.js");

var _helpers = require("./helpers.js");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var state = {
  recipe: {},
  search: {
    query: '',
    results: [],
    page: 1,
    resultsPerPage: _config.RES_PER_PAGE
  },
  bookmarks: []
};
exports.state = state;

var createRecipeObject = function createRecipeObject(data) {
  var recipe = data.data.recipe;
  return _objectSpread({
    id: recipe.id,
    title: recipe.title,
    publisher: recipe.publisher,
    sourceUrl: recipe.source_url,
    image: recipe.image_url,
    servings: recipe.servings,
    cookingTime: recipe.cooking_time,
    ingredients: recipe.ingredients
  }, recipe.key && {
    key: recipe.key
  });
};

var loadRecipe = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id) {
    var data;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _helpers.AJAX)("".concat(_config.API_URL).concat(id, "?key=").concat(_config.KEY));

          case 3:
            data = _context.sent;
            state.recipe = createRecipeObject(data);
            if (state.bookmarks.some(function (bookmark) {
              return bookmark.id === id;
            })) state.recipe.bookmarked = true;else state.recipe.bookmarked = false;
            console.log(state.recipe);
            _context.next = 13;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](0);
            // Temp error handling
            console.error("".concat(_context.t0, " \uD83D\uDCA5\uD83D\uDCA5\uD83D\uDCA5\uD83D\uDCA5"));
            throw _context.t0;

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 9]]);
  }));

  return function loadRecipe(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.loadRecipe = loadRecipe;

var loadSearchResults = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(query) {
    var data;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            state.search.query = query;
            _context2.next = 4;
            return (0, _helpers.AJAX)("".concat(_config.API_URL, "?search=").concat(query, "&key=").concat(_config.KEY));

          case 4:
            data = _context2.sent;
            console.log(data);
            state.search.results = data.data.recipes.map(function (rec) {
              return _objectSpread({
                id: rec.id,
                title: rec.title,
                publisher: rec.publisher,
                image: rec.image_url
              }, rec.key && {
                key: rec.key
              });
            });
            state.search.page = 1;
            _context2.next = 14;
            break;

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2["catch"](0);
            console.error("".concat(_context2.t0, " \uD83D\uDCA5\uD83D\uDCA5\uD83D\uDCA5\uD83D\uDCA5"));
            throw _context2.t0;

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 10]]);
  }));

  return function loadSearchResults(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.loadSearchResults = loadSearchResults;

var getSearchResultsPage = function getSearchResultsPage() {
  var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : state.search.page;
  state.search.page = page;
  var start = (page - 1) * state.search.resultsPerPage; // 0

  var end = page * state.search.resultsPerPage; // 9

  return state.search.results.slice(start, end);
};

exports.getSearchResultsPage = getSearchResultsPage;

var updateServings = function updateServings(newServings) {
  state.recipe.ingredients.forEach(function (ing) {
    ing.quantity = ing.quantity * newServings / state.recipe.servings; // newQt = oldQt * newServings / oldServings // 2 * 8 / 4 = 4
  });
  state.recipe.servings = newServings;
};

exports.updateServings = updateServings;

var persistBookmarks = function persistBookmarks() {
  localStorage.setItem('bookmarks', JSON.stringify(state.bookmarks));
};

var addBookmark = function addBookmark(recipe) {
  // Add bookmark
  state.bookmarks.push(recipe); // Mark current recipe as bookmarked

  if (recipe.id === state.recipe.id) state.recipe.bookmarked = true;
  persistBookmarks();
};

exports.addBookmark = addBookmark;

var deleteBookmark = function deleteBookmark(id) {
  // Delete bookmark
  var index = state.bookmarks.findIndex(function (el) {
    return el.id === id;
  });
  state.bookmarks.splice(index, 1); // Mark current recipe as NOT bookmarked

  if (id === state.recipe.id) state.recipe.bookmarked = false;
  persistBookmarks();
};

exports.deleteBookmark = deleteBookmark;

var init = function init() {
  var storage = localStorage.getItem('bookmarks');
  if (storage) state.bookmarks = JSON.parse(storage);
};

init();

var clearBookmarks = function clearBookmarks() {
  localStorage.clear('bookmarks');
}; // clearBookmarks();


var uploadRecipe = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(newRecipe) {
    var ingredients, recipe, data;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            ingredients = Object.entries(newRecipe).filter(function (entry) {
              return entry[0].startsWith('ingredient') && entry[1] !== '';
            }).map(function (ing) {
              var ingArr = ing[1].split(',').map(function (el) {
                return el.trim();
              }); // const ingArr = ing[1].replaceAll(' ', '').split(',');

              if (ingArr.length !== 3) throw new Error('Wrong ingredient fromat! Please use the correct format :)');

              var _ingArr = _slicedToArray(ingArr, 3),
                  quantity = _ingArr[0],
                  unit = _ingArr[1],
                  description = _ingArr[2];

              return {
                quantity: quantity ? +quantity : null,
                unit: unit,
                description: description
              };
            });
            recipe = {
              title: newRecipe.title,
              source_url: newRecipe.sourceUrl,
              image_url: newRecipe.image,
              publisher: newRecipe.publisher,
              cooking_time: +newRecipe.cookingTime,
              servings: +newRecipe.servings,
              ingredients: ingredients
            };
            _context3.next = 5;
            return (0, _helpers.AJAX)("".concat(_config.API_URL, "?key=").concat(_config.KEY), recipe);

          case 5:
            data = _context3.sent;
            state.recipe = createRecipeObject(data);
            addBookmark(state.recipe);
            _context3.next = 13;
            break;

          case 10:
            _context3.prev = 10;
            _context3.t0 = _context3["catch"](0);
            throw _context3.t0;

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[0, 10]]);
  }));

  return function uploadRecipe(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

exports.uploadRecipe = uploadRecipe;