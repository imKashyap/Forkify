"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var model = _interopRequireWildcard(require("./model.js"));

var _config = require("./config.js");

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

var _bookmarksView = _interopRequireDefault(require("./views/bookmarksView.js"));

var _addRecipeView = _interopRequireDefault(require("./views/addRecipeView.js"));

require("core-js/stable");

require("regenerator-runtime/runtime");

var _regeneratorRuntime = require("regenerator-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var controlRecipes = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var id;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            id = window.location.hash.slice(1);

            if (id) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return");

          case 4:
            _recipeView["default"].renderSpinner(); // 0) Update results view to mark selected search result


            _resultsView["default"].update(model.getSearchResultsPage()); // 1) Updating bookmarks view


            _bookmarksView["default"].update(model.state.bookmarks); // 2) Loading recipe


            _context.next = 9;
            return model.loadRecipe(id);

          case 9:
            // 3) Rendering recipe
            _recipeView["default"].render(model.state.recipe);

            _context.next = 16;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](0);

            _recipeView["default"].renderError();

            console.error(_context.t0);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 12]]);
  }));

  return function controlRecipes() {
    return _ref.apply(this, arguments);
  };
}();

var controlSearchResults = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var query;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;

            _resultsView["default"].renderSpinner(); // 1) Get search query


            query = _searchView["default"].getQuery();

            if (query) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return");

          case 5:
            _context2.next = 7;
            return model.loadSearchResults(query);

          case 7:
            // 3) Render results
            _resultsView["default"].render(model.getSearchResultsPage()); // 4) Render initial pagination buttons


            _paginationView["default"].render(model.state.search);

            _context2.next = 14;
            break;

          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2["catch"](0);
            console.log(_context2.t0);

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 11]]);
  }));

  return function controlSearchResults() {
    return _ref2.apply(this, arguments);
  };
}();

var controlPagination = function controlPagination(goToPage) {
  // 1) Render NEW results
  _resultsView["default"].render(model.getSearchResultsPage(goToPage)); // 2) Render NEW pagination buttons


  _paginationView["default"].render(model.state.search);
};

var controlServings = function controlServings(newServings) {
  // Update the recipe servings (in state)
  model.updateServings(newServings); // Update the recipe view

  _recipeView["default"].update(model.state.recipe);
};

var controlAddBookmark = function controlAddBookmark() {
  // 1) Add/remove bookmark
  if (!model.state.recipe.bookmarked) model.addBookmark(model.state.recipe);else model.deleteBookmark(model.state.recipe.id); // 2) Update recipe view

  _recipeView["default"].update(model.state.recipe); // 3) Render bookmarks


  _bookmarksView["default"].render(model.state.bookmarks);
};

var controlBookmarks = function controlBookmarks() {
  _bookmarksView["default"].render(model.state.bookmarks);
};

var controlAddRecipe = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(newRecipe) {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;

            // Show loading spinner
            _addRecipeView["default"].renderSpinner(); // Upload the new recipe data


            _context3.next = 4;
            return model.uploadRecipe(newRecipe);

          case 4:
            console.log(model.state.recipe); // Render recipe

            _recipeView["default"].render(model.state.recipe); // Success message


            _addRecipeView["default"].renderMessage(); // Render bookmark view


            _bookmarksView["default"].render(model.state.bookmarks); // Change ID in URL


            window.history.pushState(null, '', "#".concat(model.state.recipe.id)); // Close form window

            setTimeout(function () {
              _addRecipeView["default"].toggleWindow();
            }, _config.MODAL_CLOSE_SEC * 1000);
            _context3.next = 16;
            break;

          case 12:
            _context3.prev = 12;
            _context3.t0 = _context3["catch"](0);
            console.error('ðŸ’¥', _context3.t0);

            _addRecipeView["default"].renderError(_context3.t0.message);

          case 16:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[0, 12]]);
  }));

  return function controlAddRecipe(_x) {
    return _ref3.apply(this, arguments);
  };
}();

var init = function init() {
  _bookmarksView["default"].addHandlerRender(controlBookmarks);

  _recipeView["default"].addHandlerRender(controlRecipes);

  _recipeView["default"].addHandlerUpdateServings(controlServings);

  _recipeView["default"].addHandlerAddBookmark(controlAddBookmark);

  _searchView["default"].addHandlerSearch(controlSearchResults);

  _paginationView["default"].addHandlerClick(controlPagination);

  _addRecipeView["default"].addHandlerUpload(controlAddRecipe);
};

init();