"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Parcel 2
var View = /*#__PURE__*/function () {
  function View() {
    _classCallCheck(this, View);

    this._data = void 0;
  }

  _createClass(View, [{
    key: "render",

    /**
     * Render the received object to the DOM
     * @param {Object | Object[]} data The data to be rendered (e.g. recipe)
     * @param {boolean} [render=true] If false, create markup string instead of rendering to the DOM
     * @returns {undefined | string} A markup string is returned if render=false
     * @this {Object} View instance
     * @author Jonas Schmedtmann
     * @todo Finish implementation
     */
    value: function render(data) {
      var _render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
      this._data = data;

      var markup = this._generateMarkup();

      if (!_render) return markup;

      this._clear();

      this._parentElement.insertAdjacentHTML('afterbegin', markup);
    }
  }, {
    key: "update",
    value: function update(data) {
      this._data = data;

      var newMarkup = this._generateMarkup();

      var newDOM = document.createRange().createContextualFragment(newMarkup);
      var newElements = Array.from(newDOM.querySelectorAll('*'));
      var curElements = Array.from(this._parentElement.querySelectorAll('*'));
      newElements.forEach(function (newEl, i) {
        var _newEl$firstChild;

        var curEl = curElements[i]; // console.log(curEl, newEl.isEqualNode(curEl));
        // Updates changed TEXT

        if (!newEl.isEqualNode(curEl) && ((_newEl$firstChild = newEl.firstChild) === null || _newEl$firstChild === void 0 ? void 0 : _newEl$firstChild.nodeValue.trim()) !== '') {
          // console.log('ðŸ’¥', newEl.firstChild.nodeValue.trim());
          curEl.textContent = newEl.textContent;
        } // Updates changed ATTRIBUES


        if (!newEl.isEqualNode(curEl)) Array.from(newEl.attributes).forEach(function (attr) {
          return curEl.setAttribute(attr.name, attr.value);
        });
      });
    }
  }, {
    key: "_clear",
    value: function _clear() {
      this._parentElement.innerHTML = '';
    }
  }, {
    key: "renderSpinner",
    value: function renderSpinner() {
      var markup = "\n      <div class=\"spinner\">\n        <svg>\n          <use href=\"".concat(_icons["default"], "#icon-loader\"></use>\n        </svg>\n      </div>\n    ");

      this._clear();

      this._parentElement.insertAdjacentHTML('afterbegin', markup);
    }
  }, {
    key: "renderError",
    value: function renderError() {
      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._errorMessage;
      var markup = "\n      <div class=\"error\">\n        <div>\n          <svg>\n            <use href=\"".concat(_icons["default"], "#icon-alert-triangle\"></use>\n          </svg>\n        </div>\n        <p>").concat(message, "</p>\n      </div>\n    ");

      this._clear();

      this._parentElement.insertAdjacentHTML('afterbegin', markup);
    }
  }, {
    key: "renderMessage",
    value: function renderMessage() {
      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._message;
      var markup = "\n      <div class=\"message\">\n        <div>\n          <svg>\n            <use href=\"".concat(_icons["default"], "#icon-smile\"></use>\n          </svg>\n        </div>\n        <p>").concat(message, "</p>\n      </div>\n    ");

      this._clear();

      this._parentElement.insertAdjacentHTML('afterbegin', markup);
    }
  }]);

  return View;
}();

exports["default"] = View;